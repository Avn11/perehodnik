import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
import asyncio

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7945799403:AAGcc9M7l5J44V8FIcicudeUQXyqJFh87Ss"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
CHECK_CHANNEL = "https://t.me/Nuqor"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
TARGET_CHANNEL = "https://t.me/Films_Film_Films"  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
check_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! ‚úÖ", callback_data="check_subscription")]
])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    user_name = message.from_user.username or message.from_user.full_name or "–¥—Ä—É–≥"
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ö–æ–Ω–∞–Ω—É —Å —Ñ–∏–ª—å–º–∞–º–∏, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª:\n{CHECK_CHANNEL}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    await message.answer(
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É! üëá",
        reply_markup=check_keyboard
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    member = await bot.get_chat_member(chat_id="@Nuqor", user_id=user_id)  # chat_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ @—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
    if member.status in ["member", "administrator", "creator"]:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.message.answer(
            f"–°–ø–∞—Å–∏–±–æ üôè, –≤–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞! üéâ\n{TARGET_CHANNEL}\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! ‚ò∫Ô∏è"
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.message.answer(
            f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {CHECK_CHANNEL}.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=check_keyboard
        )

# –£–¥–∞–ª–µ–Ω–∏–µ webhook
async def remove_webhook():
    """–£–¥–∞–ª—è–µ—Ç webhook, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_start():
    logging.info("Removing webhook if exists...")
    await remove_webhook()
    logging.info("Bot started!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(on_start())