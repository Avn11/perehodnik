import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types

# –¢–≤–æ–π Telegram-—Ç–æ–∫–µ–Ω
TOKEN = "7860834182:AAH-12wehh4eYfJyr6uVXQp9xa19g5cKq8c"

# API-–∫–ª—é—á–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
DEXTON_API_URL = "https://api.dexton.io/v1/tokens"
HEADERS = {"Authorization": "–¢–í–û–ô_API_–ö–õ–Æ–ß"}

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
async def get_new_tokens():
    try:
        response = requests.get(DEXTON_API_URL, headers=HEADERS)
        data = response.json()

        new_tokens = []
        for token in data:
            if token["liquidity"] > 10000 and token["holders"] > 50:
                new_tokens.append(
                    f"üî• –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token['name']} ({token['symbol']})\n"
                    f"üìå –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {token['contract_address']}\n"
                    f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {token['liquidity']} TON\n"
                    f"üë• –•–æ–ª–¥–µ—Ä—ã: {token['holders']}\n"
                    f"üìä –û–±—ä–µ–º: {token['volume']} TON"
                )

        return new_tokens
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_alerts():
    while True:
        new_tokens = await get_new_tokens()
        for token in new_tokens:
            await bot.send_message("–¢–í–û–ô_CHAT_ID", token)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(send_alerts())
    await dp.start_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())