import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∫–ª—é—á–∏
TELEGRAM_TOKEN = "7628342828:AAGpTOxvB6h5q5DKtsnpBybhH_ljV1Z794E"
TONCENTER_API_KEY = "96e65a2a16142db0361e74c72915a3c3611e04bc678c6b53eca3240d74a16c1a"
TELEGRAM_CHAT_ID = "7885730629"

# –≠–Ω–¥–ø–æ–∏–Ω—Ç TON Center API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
TONCENTER_API_URL = "https://toncenter.com/api/v2/getTokenInfo"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

def get_token_data(contract_address):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ TON Center API.
    """
    params = {
        "address": contract_address,
        "api_key": TONCENTER_API_KEY
    }
    try:
        response = requests.get(TONCENTER_API_URL, params=params)
        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–∫–µ–Ω—É {contract_address}: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {contract_address}: {e}")
        return None

async def get_new_tokens():
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–ª—É—á–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    new_token_addresses = [
        "EQC5PXgKwNIcLtffu1OwWfo7dxW_1jbLjRfCKNk_7QKedsMZ",
        "EQAPki8c1ZR9jUodpQg_I5-PrITe_iHctzMYTSBS8lN0zOYV",
        "EQBvjexhDfOFNb28PVX36jOJLIrb9tn730cHqX076rLTp9BQ",
        "EQAS-THqoeKRzY2j78Cia7NPqHPop7xEoMDsGuAL__W3zHBz"
    ]
    alerts = []
    for address in new_token_addresses:
        token = get_token_data(address)
        if token:
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–∏:
                liquidity = float(token.get("liquidity", 0))
                holders = int(token.get("holders", 0))
                volume = float(token.get("volume", 0))
                name = token.get("name", "Unknown")
                symbol = token.get("symbol", "N/A")
                
                # –§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å 10 000 TON –∏ –±–æ–ª–µ–µ 50 —Ö–æ–ª–¥–µ—Ä–æ–≤
                if liquidity > 10000 and holders > 50:
                    alert_message = (
                        f"üî• –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {name} ({symbol})\n"
                        f"üìå –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {address}\n"
                        f"üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity} TON\n"
                        f"üë• –•–æ–ª–¥–µ—Ä—ã: {holders}\n"
                        f"üìä –û–±—ä–µ–º: {volume} TON"
                    )
                    alerts.append(alert_message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ {address}: {e}")
    return alerts

async def send_alerts():
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ Telegram.
    """
    while True:
        alerts = await get_new_tokens()
        for alert in alerts:
            await bot.send_message(TELEGRAM_CHAT_ID, alert)
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    asyncio.create_task(send_alerts())
    await dp.start_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())