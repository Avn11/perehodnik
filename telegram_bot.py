import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from sklearn.ensemble import RandomForestClassifier
import numpy as np

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = "7211119418:AAEyibsFiC_W-UClM-zyjbIhtYUrvwpxcz8"
CHAT_ID = "7211119418"  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
API_URL = "https://api.geckoterminal.com/api/v2/networks/ton/tokens"
MIN_HOLDERS = 50     
MIN_LIQUIDITY = 1000  
MIN_VOLUME = 500  
CHECK_INTERVAL = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) = 5 –º–∏–Ω—É—Ç
TOP_TOKENS = []

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
found_tokens = set()  # –•—Ä–∞–Ω–∏—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã

# === –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò ===
def train_model():
    global model
    X_train = np.array([
        [100, 5000, 1000],  
        [30, 800, 300],  
        [200, 10000, 5000],  
        [10, 100, 50]  
    ])
    y_train = np.array([1, 0, 1, 0])  
    
    model = RandomForestClassifier(n_estimators=100)
    model.fit(X_train, y_train)
    logging.info("üéØ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –¢–û–ö–ï–ù–û–í ===
async def find_new_tokens():
    global found_tokens
    while True:
        try:
            response = requests.get(API_URL)
            data = response.json()
            tokens = data.get("data", [])
            
            good_tokens = []
            for token in tokens:
                try:
                    address = token["id"]
                    holders = int(token["attributes"]["holders"])
                    liquidity = float(token["attributes"]["liquidity"])
                    volume = float(token["attributes"]["volume_24h"])

                    prediction = model.predict([[holders, liquidity, volume]])[0]

                    if prediction == 1 and address not in found_tokens:  
                        found_tokens.add(address)
                        good_tokens.append(f"{address}\nüìå –•–æ–ª–¥–µ—Ä—ã: {holders} | üí∞ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {liquidity}$ | üìä –û–±—ä–µ–º: {volume}$")
                except Exception as e:
                    logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")

            if good_tokens:
                await bot.send_message(CHAT_ID, "\n\n".join(good_tokens))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

        await asyncio.sleep(CHECK_INTERVAL)  

# === –ö–û–ú–ê–ù–î–ê /start ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üöÄ –Ø –∏—â—É –Ω–æ–≤—ã–µ –º–µ–º–∫–æ–∏–Ω—ã –≤ TON 24/7. –ñ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    train_model()
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(find_new_tokens())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    await dp.start_polling(bot)

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == "__main__":
    asyncio.run(main())